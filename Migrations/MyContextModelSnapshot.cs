// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using csharp_project.Models;

namespace csharp_project.Migrations
{
    [DbContext(typeof(MyContext))]
    partial class MyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("csharp_project.Models.Category", b =>
                {
                    b.Property<int>("Categoryid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("Created_At")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("Updated_At")
                        .HasColumnName("updated_at");

                    b.HasKey("Categoryid");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("csharp_project.Models.Gallery", b =>
                {
                    b.Property<int>("Galleryid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("Categoryid");

                    b.Property<DateTime>("Created_At")
                        .HasColumnName("created_at");

                    b.Property<string>("Image_URL");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnName("updated_at");

                    b.HasKey("Galleryid");

                    b.HasIndex("Categoryid");

                    b.ToTable("Galleries");
                });

            modelBuilder.Entity("csharp_project.Models.Item", b =>
                {
                    b.Property<int>("Itemid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("Created_At")
                        .HasColumnName("created_at");

                    b.Property<int>("Galleryid");

                    b.Property<int>("Orderid")
                        .HasColumnName("order_id");

                    b.Property<int>("Productid")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnName("updated_at");

                    b.HasKey("Itemid");

                    b.HasIndex("Galleryid");

                    b.HasIndex("Orderid");

                    b.HasIndex("Productid");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("csharp_project.Models.Order", b =>
                {
                    b.Property<int>("Orderid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("Created_At")
                        .HasColumnName("created_at");

                    b.Property<int?>("Productid");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnName("updated_at");

                    b.Property<int?>("Userid");

                    b.HasKey("Orderid");

                    b.HasIndex("Productid");

                    b.HasIndex("Userid");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("csharp_project.Models.Product", b =>
                {
                    b.Property<int>("Productid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("Created_At")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description");

                    b.Property<double>("Price")
                        .HasColumnName("price");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnName("size");

                    b.Property<string>("Style")
                        .IsRequired()
                        .HasColumnName("style");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnName("updated_at");

                    b.HasKey("Productid");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("csharp_project.Models.User", b =>
                {
                    b.Property<int>("Userid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("city")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<DateTime>("Created_At")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnName("state")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnName("street")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnName("updated_at");

                    b.Property<int>("Zipcode")
                        .HasColumnName("zipcode")
                        .HasColumnType("INT");

                    b.HasKey("Userid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("csharp_project.Models.Gallery", b =>
                {
                    b.HasOne("csharp_project.Models.Category", "Category")
                        .WithMany("allImages")
                        .HasForeignKey("Categoryid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("csharp_project.Models.Item", b =>
                {
                    b.HasOne("csharp_project.Models.Gallery", "ChosenImage")
                        .WithMany()
                        .HasForeignKey("Galleryid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("csharp_project.Models.Order", "Order")
                        .WithMany("ItemsOrdered")
                        .HasForeignKey("Orderid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("csharp_project.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("Productid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("csharp_project.Models.Order", b =>
                {
                    b.HasOne("csharp_project.Models.Product")
                        .WithMany("Orders_In")
                        .HasForeignKey("Productid");

                    b.HasOne("csharp_project.Models.User")
                        .WithMany("Orders")
                        .HasForeignKey("Userid");
                });
#pragma warning restore 612, 618
        }
    }
}
